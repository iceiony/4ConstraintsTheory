PHYSICS engine

First task of interest is in simulating the physical matching of tools to objects in 3D environments, as done by humans subjects.

In this approach it is required to considered the mathematical formalisation of objects matching using force closure [ForceClosure]. However, a shortcut to such physical interactions is to consider using a physics engine such as in [SimulationAsEngineOfSceneUnderstanding]. To some extent, it is believed that the human brain computes approximate of Newtonian laws. Similarly, physics engines do not compute exact friction, closure or gravity laws, but provide realistic results which can be experimented on. 

As suggested by [SimulationAsEngineOfSceneUnderstanding] we consider Bullet Physics for simulating the dynamics of object interaction under different forces and surface types. Other engines such as Open Dynamic Engine were considered, but have been found to be less portable or less likely to integrate with Matlab. 

BULLET INSTALL
Navigate to the engine's public source code and follow installation instructions  
https://github.com/bulletphysics/bullet3
Navigate to the matlab interface binding source code and follow instructions 
https://github.com/bminortx/Buckshot

FOLLOW BULLET INSTALL NOTES FROM: 
http://bulletphysics.org/mediawiki-1.5.8/index.php/Installation
cmake .. -G "Unix Makefiles" -DINSTALL_LIBS=ON -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=ON

Bullet physics has more cross platform support and there is also some matlab integration for it. Also, I've read that the engine does well in dealing with the problems Jeremy mentioned (  surface tension and wobbling ).

It is worth mentioning that the engine can function with no 3D rendering ( as a standalone computation engine ). Although rendering is initially required to make sense of the code defining shapes and movements.

The physics engine code itself is sound, it compiles and installs easily on a machine. The matlab integration however is completely abysmal. After 3 days of hard work I managed to get the integration code to compile and run. It runs fine with no rendering but I can also use matlab figure rendering (which is extremely slow compared to normal 3D rendering).

Alternative to matlab, we would have to use C++ for writing the simulations. I would avoid it if possible.
C++ is not an easy language, the effect is that it shifts focus from the problem you are solving to dealing with the code complexities. 

There is an entire zoo of physics engines out there. The attached paper from 2007 states :
"Of  the  open  source  engines  the  Bullet  engine  provided  the  best 
results   overall,   outperforming   even   some   of   the   commercial engines."

Other papers from 2012 and 2013 ( EvaluatingPhysicsEngines2 and EvaluatingPhisicsEginesForRobotics ) continue to show bullet as having best rigid body collision detection. Newton Game Physics is remarked as having better precision in the 2012 paper but at a performance cost. The precision measure however contradicts the 2007 review. In the 2013 paper Bullet is also mentioned as having poor collision detection for small and medium sized objects. In which case, scaling objects to higher dimensions may greatly improve detection although may expand our search space ( as there are larger value ranges to search in for our exhaustive solution ). 

Another review paper from 2015 mentions a new engine (MuJoCo) as having the highest precision in every aspect of simulation. The paper itself was however written by the engine developers. The engine is targeted at research instead of game development so is intended for higher fidelity. Most physics engine review articles fail to specify the version of the engines they use. With the engine's being under active development evaluation is transient, therefore it is important to know product versions.  ODE should not be considered as an option as it is no longer under active development. 

Higher precision : it more faithfully simulates physical interaction ( e.g. time wise integration of movement, collision, energy transfer, friction etc. )
Lower Performance : computational cost of execution is higher and would therefore take more time to execute. 

Newton Physics was quoted to use a deterministic solver instead of numerical methods for integrating movement and forces over time. This can lead to higher simulation precision. We therefore attempt to use both bullet and newton for our simulation.

It is not easy to find commercial engine prices. All of them require direct contact for a quote (an angine named Havok is said to charge $50k-$60k per game title ).
The most advanced engine for scientific simulation seems to be Vortex by CM-LABS. All other products are primarily aimed at game development. 

I will take a look at matlab specific solutions for rigid body dynamics (e.g. robotics toolkit )

Agreed, 2007 is a bit old. I've found another paper from 2013 (attached): [ref physics_comparison.png]
The table/figure in this email is a summary of the tests performed and overall results.
PhysX is a commercial game engine. I think it is worth adding that most commercial engines don't charge for non-commercial projects.

You are right, the SDKs don't come with source code. But the SDK's just control the physical world dynamics, not the actions of our agent. Therefore, we should be able to use commercial engines too.

The only concern is if the engine does not behave correctly in some aspect, it can not be mitigated or modified. For instance, if the friction laws used might require replacement. 



BASIC EXAMPLE IMPLEMENTATION
Bullet Physics 
For testing the bullet engine we first define a simple example demo containing a basic tool and object. Figure [basic_demo_figures.png] shows the tool and objects defined. We initially use btConvexHullShape for defining the objects collision properties. Unfortunately, since bullet is primarily a game engine, the convex hull shape simply defines an approximation of the collision object, based on the object's mesh (figure [basic_demo_collision.png]). 
A better approach is to make use of a more computational expensive construct, namely btGImpactShape. The collision shape defined by this class can take the exact form of the object's mesh as per figure [badic_demo_exactCollision.png]

A magnitude of engine parameters can influence the effects of interaction between two objects:
 *Jittering/Shaking effects can be noticed if the  interaction margin between the two shapes is too small. Visually the effect is unrealistic even if the overall result is similar to a smooth movement one. On the other hand if the threshold margin is too large, the  object shapes would not be represented correctly with the tool not being able to properly fit in the object's gaps. 
 *The movement of tool and objects can be done multiple ways : 
   1. The tool can have 0 mass and be moved through updating it's location with each step. It is as if the tool simply teleports in the world to new locations. Zero mass tools are considered kinematic objects. As the tool's position collides with the object, the object is pushed in an opposite direction. This however results in sudden force impulses on the object since position updates carry no motion velocity information. 
   2. The tool can have mass and forces can be applied directly to it to control it's movement. This scenario is also undesirable. Tool movement control becomes difficult especially as the tool collides with the target object. The contact location creates forces in opposite directions for both tool and target object. It would be required for the tool to compensate such forces in order to not bounce of the target object.
   3. Tool can have mass but interact as a kinematic object. Objects with zero mass can not be moved by interacting forces. Fortunately, the object's collision properties can be changed to behave kinematic like, even as the object carries mass. As the object has mass, and collision is kinematic, moving the object through motion state forces will create more realistic interaction on collision. The technique however is still highly sensitive to simulation step size, collision shape margin and the speed of movement generated by the motion state.  However, as the simulation precission lowers, the shaking effect of interaction disapears . 

Experimental Setup
To test human subjects interaction with novel objects for spatial reasoning tasks, Dietmar and Francois design an experiment using lego. A target object composed from lego bricks would be manipulated using a corresponding lego tool. The experiments would not include  distractors ( multiple lego tools and a single target object ) but would require the subject to reason about the spatial fitting of the tool to object in order to either move the object to a new location or push it along a predefined trajectory.

To represent accurate object dimensions as 3D models in our simulator, the tools and objects were created using Lego designer and then converted to a suitable format using LDView and Blender (fig. [obj51.png] [obj52.png]). The centre of mass was set to the center of gravity of the geometry ( which may not correspond to reality).

When using LDD exported models the contact regions of the fitted shapes may be extremely tight. In such conditions small collisions at the point of contact between a target object and a grasping object make the models bounce with increasing force against each other. That is, collision forces are detected from opposite sides of the object or the object bounces between opposite sides with increase velocity. Forces generated by the contact regions amplify until the target object bursts out of the grasping of a tool.

The effect is a limitation of simulation engines and can be observed as a violent shaking of the objects being fitted. A couple of approaches were successful in fixing this issue : 
1. Reducing the mass of the target object in order to reduce the amplitude of collision forces. In bullet, collision forces strongly depends on the mass of objects.
2. Scaling the size of both tool and object so that contact regions are better detected.
3. Reducing the scale of the target object in respect to it's tool by a small factor to allow for larger gaps in the fitting space. 

Newton Dynamics 
From the following video you can see that the objects behave correctly, with no shaking occurring (https://www.dropbox.com/s/0fn88erpnbeu8bq/NewtonPhysicsNoShake.mp4?dl=0). There was no need to modify object sizes or worry about the exact fitting margins of shapes. The default settings work very well.


The engine was however hard to use, primarily due to the lack of documentation and community support ( information available on forums ). There are thousands of lines of demo code, and finding how to do exactly what you intend is difficult. There were also a hand full of compilation errors of the engine for MacOS. Windows and Linux would however not suffer from those. 

I believe the engine is going to do a good job simulating physical properties. The API syntax is a bit strange in it's behaviour, but such strangeness can be wrapped by cleaner code. There is no python wrapper for the engine, although there certainly was at as some point. We will still have to integrate our code for Matlab or Python. 

Additionally , code has to be written for more common file formats storing the 3D models. Engine demo code is not compatible with any commonly used format. Models had to be converted from .3ds to .off using a special blender plugin. 

Exhaustive Search
In implementing an exhaustive fitting search, Newton Dynamics demo code was adapted. The search model would have to operate in both a graphical and non-graphical mode.
The graphical requirement is such that a researcher can investigate the correct loading of objects and interactions in the 3D world. The non-graphical model would provide faster computation as rendering overburden is removed. 
In a graphical mode, the simulation allows mouse and keyboard control of the camera. An user is able to pause the physical world simulation and freely move the camera to observe contact points and exact fitting of objects.
	
Figure [NewtonSimujlation.png] captures the rendering. Two objects are presented in a fitting position. Visual meshes are displayed in green. Collision meshes are outlining white lines. The contact points are displayed as red dots at the surface of meshes. 3D orientation vector axis are displayed as a visual queue for rotation angles( red , green , blue for x , y , z respectively). The bounding blue boxes around the two objects represent the coordinates of the extremities of vertices in x,y,z coordinates ( i.e. minX,minY,minZ and maxX,maxY,maxZ ).
 
NewtonDynamics has the in built ability to optimise meshes as convex decomposition. This means, complex assemblies of triangles representing simple shapes , such as cylinders, can be optimised to simpler mesh structures representing the same shapes. A complex object would therefore be transformed to an assembly of simple shapes. 

Convex decomposition greatly improves the performance of simulations. The process can be achieved at multiple levels of precision. This setting may have to be adjusted for future models. 

Modifying existing demo code involved replacing 3D rendering initialisation. Code was adjusted so that physical simulation can be independently modified from rendering (i.e. the simulation code has no dependency on the existence of rendering ). The effect of this design allows for simulation code to be simple and untangled from rendering constraints. 

Newton dynamics supports loading models from unusual file formats (*.ngd and *.off). The sported formats are not compatible with widely used 3D modelling software or engines (e.g. blender, ldView or lego designer). In order to avoid difficulties in converting to unpopular formats, code was written to support the widely used *.3ds format ( 3D studio ).

When loading objects in the simulation world, collision points are not detected immediately. A few simulation time steps are required in order for these to be detected. 


